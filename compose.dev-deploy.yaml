# "dev-deploy" containerizes Django and Vite
# Django and Vite should both be running their development servers with bind
# mounts to source code

services:
  arangodb:
    image: arangodb
    environment:
      ARANGO_NO_AUTH: 1
    ports:
      - "8529:8529"

  db:
    image: postgres
    environment:
      POSTGRES_DB: python_bells
      POSTGRES_USER: python_bells
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U python_bells"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always
    secrets:
      - postgres_password
    volumes:
      - db-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq

  redis:
    image: redis

  vite:
    build:
      context: ./app
      dockerfile: Dockerfile.vite
    volumes:
      - /code/app/node_modules
      - ./app:/code/app
    ports:
      - "1234:1234"

  # Django containers
  celery-worker:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
      additional_contexts:
        django_base: ../django_base
    depends_on:
      - rabbitmq
      - redis
    env_file: .env.dev-deploy
    volumes:
      - /code/bells/app/node_modules
      - ../django_base:/code/django_base:ro
      - ./app:/code/bells/app:ro

  web:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
      additional_contexts:
        django_base: ../django_base
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      vite:
        condition: service_started
    entrypoint: /entrypoint.dev-deploy.sh
    env_file: .env.dev-deploy
    environment:
      DB_HOST: "db"
    ports:
      - "8000:8000"
    volumes:
      - /code/bells/app/node_modules
      - ../django_base:/code/django_base:ro
      - ./app:/code/bells/app:ro

volumes:
  db-data:
  static_volume:

secrets:
  postgres_password:
    file: ./app/etc/postgres.txt
